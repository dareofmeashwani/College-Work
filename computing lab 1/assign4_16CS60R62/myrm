#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/types.h>
#include<string.h>
#include<pwd.h>
#include <dirent.h>
#include <sys/stat.h>
#include<fcntl.h>
#include <errno.h>
#include <time.h>
#include <grp.h>
int checkdir(char *directory)
{
	DIR* dir = opendir(directory);
	if (dir)
	{
	    	/* Directory exists. */
	    	closedir(dir);
		return 1;
	}
	else if (ENOENT == errno)
	{
	    	/* Directory does not exist. */
		return 0;
	}
	else
	{
	    /* opendir() failed for some other reason. */
		return -1;
	}
}
int recursiveDelete(char* dirname) {

  DIR *dp;
  struct dirent *ep;

  char abs_filename[FILENAME_MAX];

  dp = opendir (dirname);
  if (dp != NULL)
    {
      while (ep = readdir (dp)) {
        struct stat stFileInfo;

        snprintf(abs_filename, FILENAME_MAX, "%s/%s", dirname, ep->d_name);

        if (lstat(abs_filename, &stFileInfo) < 0)
          perror ( abs_filename );

        if(S_ISDIR(stFileInfo.st_mode)) {
          if(strcmp(ep->d_name, ".") && 
             strcmp(ep->d_name, "..")) {
            printf("%s directory\n",abs_filename);
            recursiveDelete(abs_filename);
          }
        } else {
          printf("%s file\n",abs_filename);
                  remove(abs_filename);
        }
          }
      (void) closedir (dp);
        }
  else
    perror ("Couldn't open the directory");


  remove(dirname);
  return 0;

}
int isDirectoryEmpty(char *dirname) {
  int n = 0;
  struct dirent *d;
  DIR *dir = opendir(dirname);
  if (dir == NULL) //Not a directory or doesn't exist
    return 1;
  while ((d = readdir(dir)) != NULL) {
    if(++n > 2)
      break;
  }
  closedir(dir);
  if (n <= 2) //Directory Empty
    return 1;
  else
    return 0;
}
int main (int argc, char **argv)
{
	char argument[1000],condition[5];
	int i,j;
	for(i=0;i<=strlen(argv[2]);i++)
	{
	argument[i]=*(*(argv+2)+i);
	}
	argument[i]='\0'; 
	char dirlist[100][100],dirpath[100][100];
	for(i=0;i<100;i++)for(j=0;j<100;j++){dirlist[i][j]='\0';dirpath[i][j]='\0';}
	int index=0,n=0;
	if(argument[0]=='-'&& argument[1]=='d'&&argument[2]=='\0'){i=3;condition[0]=argument[0];condition[1]=argument[1];condition[2]='\0';}
	if(argument[0]=='-'&& argument[1]=='r'&&argument[2]=='\0'){i=3;condition[0]=argument[0];condition[1]=argument[1];condition[2]='\0';}
	else i=0;
	while(1)
 	{			
		if(argument[i]=='\0')
		{
		        strncpy(dirlist[n],argument+index,i-index);
			n++;
			break;
		}
		if(argument[i]==' ') 
		{
			strncpy(dirlist[n],argument+index,i-index);
			n++; 
			index=i+1; 
		}
		if(argument[i]=='/')
		{
			char temp[100];for(j=0;j<100;j++)temp[j]='\0';	
			strncpy(temp,argument+index,i-index);
			strcat(dirpath[n],temp);
			strcat(dirpath[n],"/");
			index=i+1; 
		}
		i++;
		
 	}
	for(i=0;i<n;i++)
	{
		if(dirpath[i][0]=='\0')
		{	
			char temp[100];for(j=0;j<100;j++)temp[j]='\0';
			strcat(temp,argv[1]);
			strcat(temp,dirpath[i]);
			strcat(temp,"//");
			strcat(temp,dirlist[i]);
			if(strcmp(condition,"-d")==0){if(isDirectoryEmpty(temp)==1) recursiveDelete(temp); }
			else if(strcmp(condition,"-r")==0){recursiveDelete(temp);}
			else recursiveDelete(temp);
		}
		else 
		{
			for(j=0;j<strlen(dirpath[i]);j++)
			{
				
				if(dirpath[i][j]=='/')
				{
					char temp[100],temp1[100];temp1[0]='\0';temp[0]='\0';
					strcat(temp,argv[1]);
					strncpy(temp1,dirpath[i],j);
					strcat(temp,"/");
					strcat(temp,temp1);
				}
			}
			char tempe[100];for(j=0;j<100;j++)tempe[j]='\0';
			strcat(tempe,argv[1]);
			strcat(tempe,"/");
			strcat(tempe,dirpath[i]);			
			strcat(tempe,dirlist[i]);
		}
	}
return 0;
}
